import json
import logging
from pathlib import Path

import pytest
import pytest_asyncio
from httpx import ASGITransport, AsyncClient
from pytest_httpserver import HTTPServer

ASSETS_DIR = Path(__file__).parent / "assets"


@pytest_asyncio.fixture(scope="function")
async def app_client():
    from dotenv import load_dotenv

    import geekcon
    from geekcon import app
    from geekcon.depends import app_lifespan
    from geekcon.state import ContestMode

    geekcon.contest_mode = ContestMode.AI_FOR_PENTEST

    load_dotenv()
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    async with (
        app_lifespan(app),
        AsyncClient(transport=ASGITransport(app=app), base_url="http://test") as client,
    ):
        yield client


@pytest.mark.asyncio
async def test_pentest(httpserver: HTTPServer, app_client: AsyncClient):
    httpserver.expect_request(uri := "/pen_demo.zip").respond_with_data(
        (ASSETS_DIR / "pen_demo.zip").read_bytes(),
    )

    response = await app_client.get(
        "/chall",
        params={"file": httpserver.url_for(uri)},
        timeout=60,
    )
    assert response.status_code == 200
    assert response.text == "ok"

    response = await app_client.get(
        "/chat",
        params={"message": "请问上述配置文件中存在哪些敏感信息？"},  # noqa: RUF001
        timeout=10,
    )
    assert response.status_code == 200
    assert response.json() == json.loads(
        (ASSETS_DIR / "pentest_result.json").read_text(encoding="utf-8")
    )
